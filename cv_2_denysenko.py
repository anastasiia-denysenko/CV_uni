import matplotlib.pyplot as plt #Для відображення результату
import numpy as np #Для роботи з матрицями
import cv2 #Для того щоб зчитати зображення у вигляді двовимірного массиву
#Зчитуємо зображення
image = cv2.imread("C:\\Users\\Anastasiia\\Downloads\\photo.jpg", 0)
cv2.imshow('Grayscale Image', image)

#Ви можете прибрати знак # для певної маски, щоб передивитись результат
#Для інверсії
#mask = np.matrix('0, 0, 0; 0, -1, 0; 0, 0, 0')
#Для фiльтра границi
#mask = np.matrix('-1, -1, -1; -1, 8, -1; -1, -1, -1')
#Вертикальний фільтр Собеля
#mask =  np.matrix('-1, 0, 1; -2, 0, 2; -1, 0, 1')
# Пiдвищення рiзкостi. Перший філтр - з лекційних матеріалів (Figure_sharpening),
# другий - з cs.cornell.edu, здається, дає кращие релултат (Figure_sharp)
#mask = np.matrix('0, -1, 0; -1, 5, -1; 0, -1, 0')
#mask = np.matrix('0, 0, 0; 0, 2, 0; 0, 0, 0') - np.matrix('1, 1, 1; 1, 1, 1; 1, 1, 1')/9
#Розмиття по Гаусу. Перший фільтр 11х11 з researchgate.net не дав потрібних резултатів,
#тому в наступних двох застосовується фільтр 3х3 з лекцій, та фільтр 9х9 з demofox.org.
#mask = np.matrix('0, 0, 0, -1, -1, -2, -1, -1, 0, 0, 0; 0, 0, -2, -4, -8, -9, -8, -4, -2, 0, 0; 0, -2, -7, -15, -22, -23, -22, -15, -7, -2, 0; -1, -4, -15, -24, -14, -1, -14, -24, -15, -4, -1; -1, -8, -22, -14, 52, 103, 52, -14, -22, -8, -1; -2, -9, -23, -1, 103, 178, 103, -1, -23, -9, -2; -1, -8, -22, -14, 52, 103, 52, -14, -22, -8, -1; -1, -4, -15, -24, -14, -1, -14, -24, -15, -4, -1; 0, -2, -7, -15, -22, -23, -22, -15, -7, -2, 0; 0, 0, -2, -4, -8, -9, -8, -4, -2, 0, 0; 0, 0, 0, -1, -1, -2, -1, -1, 0, 0, 0')
#mask = np.matrix('1, 2, 1; 2, 4, 2; 1, 2, 1')/16
#mask = np.matrix('0, 0, 0, 0.0001, 0.0001, 0.0001, 0, 0, 0; 0, 0, 0.0004, 0.0014, 0.0023, 0.0014, 0.0004, 0, 0; 0, 0.0004, 0.0037, 0.0146, 0.0232, 0.0146, 0.0037, 0.0004, 0; 0.0001, 0.0014, 0.0146, 0.0584, 0.0926, 0.0584, 0.0146, 0.0014, 0.0001; 0.0001, 0.0023, 0.0232, 0.0926, 0.1466, 0.0926, 0.0232, 0.0023, 0.0001; 0.0001, 0.0014, 0.0146, 0.0584, 0.0926, 0.0584, 0.0146, 0.0014, 0.0001; 0, 0.0004, 0.0037, 0.0146, 0.0232, 0.0146, 0.0037, 0.0004, 0; 0, 0, 0.0004, 0.0014, 0.0023, 0.0014, 0.0004, 0, 0; 0, 0, 0, 0.0001, 0.0001, 0.0001, 0, 0, 0')
# Розмиття "Рух" по діагоналі, 7х7 (researchgate.net)
#mask = np.matrix('0, 0, 0, 0, 0, 0.0145, 0; 0, 0, 0, 0, 0.0376, 0.1283, 0.0145; 0, 0, 0, 0.0376, 0.1283, 0.0376, 0; 0, 0, 0.0376, 0.1283, 0.0376, 0, 0; 0, 0.0376, 0.1283, 0.0376, 0, 0, 0; 0.0145, 0.1283, 0.0376, 0, 0, 0, 0; 0, 0.0145, 0, 0, 0, 0, 0')
#Фільтр "Двоїться в очах" (Оригінальна розробка)
#mask = np.matrix('0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0')

#Нормалізація фільтру
mask = mask/255.0
#Створюємо рядки в зображенні результаті
result_rows = image.shape[0] - mask.shape[0]
#Створюємо стовпчики в зображенні результаті
result_columns = image.shape[1] - mask.shape[1]
#Створюємо матрицю заповнену нулями
result = np.zeros([result_rows, result_columns])
#Створюємо функцію для обрахунку результату для кожної клітинки
for r in range(result_rows):
    for c in range(result_columns):
        val = np.multiply(image[r:r+mask.shape[0], c:c+mask.shape[1]], mask)
        val = np.sum(np.ravel(val))
        result[r][c] = val / np.prod(mask.shape)
#Показуємо зображення
plt.figure(figsize=(5,8))
plt.imshow(result, cmap='gray')
plt.show()

